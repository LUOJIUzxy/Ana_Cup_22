customers <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv",
col_types = cols(CUSTOMER = col_character()))
library(tidyverse)
library(readr)
customers <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv",
col_types = cols(CUSTOMER = col_character()))
View(customers)
train_df_cust <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv",
col_types = cols(CUSTOMER = col_character()))
view(customers)
df_full = merge(x=train_df_cust,y=train_df_trans,by="CUSTOMER",all=TRUE)
df_full = merge(x=train_df_cust,y=train_df_trans,by="CUSTOMER",all.x = TRUE)
train_df_trans <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/transactions.csv")
df_full = merge(x=train_df_cust,y=train_df_trans,by="CUSTOMER",all.x = TRUE)
view(df_full)
view(train_df_cust)
view(train_df_trans)
train_df_cust <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv")
view(train_df_cust)
col_types = cols(CUSTOMER = col_integer())
view(train_df_cust)
df_full = merge(x=train_df_cust,y=train_df_trans,by="CUSTOMER",all.x = TRUE)
view(df_full)
train_df_cust <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv",
col_types = cols(CUSTOMER = col_integer()))
view(train_df_cust)
df_full = merge(x=train_df_cust,y=train_df_trans,by="CUSTOMER",all.x = TRUE)
view(df_full)
train_df_geo <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/geo.csv")
df_full = merge(train_df_trans, train_df_geo,by="SALES_LOCATION")
view(df_full)
train_df_geo[geo == "CH"] <- "Switzerland"
train_df_geo <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/geo.csv")
view(train_df_geo)
train_df_geo[train_df_geo == "CH"] <- "Switzerland"
train_df_geo[train_df_geo == "FR"] <- "France"
train_df_cust <- train_df_cust %% mutate(CUSTOMER = as.character(CUSTOMER))
train_df_cust <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv",
col_types = cols(CUSTOMER = col_integer()))
train_df_trans <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/transactions.csv")
train_df_cust <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv")
train_df_cust <- train_df_cust %% mutate(CUSTOMER = as.character(CUSTOMER))
view(train_df_cust)
train_df_cust <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv", CUSTOMER = col_character(),REV_CURRENT_YEAR = col_number()))
train_df_cust <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv", CUSTOMER = col_character(),REV_CURRENT_YEAR = col_number())
train_df_cust <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv", CUSTOMER = col_character(), REV_CURRENT_YEAR = col_number())
train_df_cust <- read_csv("C:/Users/zxy/Documents/Analytics_Cup/Training_Data_AC2022_pDULzZv/customers.csv", col_types = cols(CUSTOMER = col_character(), REV_CURRENT_YEAR = col_number()))
train_df_cust <- train_df_cust %% mutate(CUSTOMER = as.character(CUSTOMER))
transactions$CUSTOMER = str_replace(transactions$CUSTOMER,"\"","")
train_df_trans$CUSTOMER = str_replace(train_df_trans$CUSTOMER,"\"","")
train_df_trans$CUSTOMER = str_replace(train_df_trans$CUSTOMER,"\"","")
df_full = merge(train_df_trans,train_df_geo geo,by="SALES_LOCATION")
df_full = merge(train_df_trans,train_df_geo,by="SALES_LOCATION")
df_full = full_join(df_full, train_df_cust, by="CUSTOMER")
view(df_full)
## find missing values
sapply(df_full, function(train_df_cust) sum(is.na(train_df_cust)))
## droping df_full$TEST_SET_ID
df_full <- subset(df_full, select = -c(TEST_SET_ID, END_CUSTOMER ))
#dropping all the missing data
df_full2 <- df_full[complete.cases(df_full),]
## setting to all caps
df_full2$OFFER_STATUS <- toupper(df_full2$OFFER_STATUS)
df_full2$OFFER_STATUS
nom_val = c("COUNTRY.x", "COUNTRY.y", "CURRENCY", "OWNERSHIP", "SALES_BRANCH", "SALES_OFFICE", "BUSINESS_TYPE", "OFFER_TYPE", "TECH", "PRICE_LIST", "SALES_LOCATION")
{df_full2$i <- as.factor(df_full2$i)}
#clean the dates
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"/",".")
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"[.]","-")
view(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR")
df_full2$CREATION_YEAR <- as.Date(format = "%Y%m%d", df_full2$CREATION_YEAR")
df_full2$CREATION_YEAR <- as.Date(format = "%Y%m%d", "df_full2$CREATION_YEAR")
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", format='%d-%Y-%m')
view(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", format='%d-%m-%Y')
view(df_full2$CREATION_YEAR)
view(df_full2$CREATION_YEAR)
#clean the dates
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"/",".")
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"[.]","-")
view(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", format="%d-%m-%Y")
view(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR")
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", '%d-%m-%Y')
view(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", '%d%m%Y')
view(df_full2$CREATION_YEAR)
#reformat the CREATION_YEAR
#Sys.setlocale("LC_TINE", "C")
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", '%d-%m-%y')
view(df_full2$CREATION_YEAR)
#reformat the CREATION_YEAR
Sys.setlocale("LC_TINE", "English")
#reformat the CREATION_YEAR
Sys.setlocale("Lc_TIME", "English")
#reformat the CREATION_YEAR
Sys.setlocale("LC_TIME", "English")
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", '%d-%m-%Y')
view(df_full2$CREATION_YEAR)
#reformat the CREATION_YEAR
Sys.setlocale("LC_TIME", "C")
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", '%d-%m-%Y')
view(df_full2$CREATION_YEAR)
Sys.setlocale("LC_TIME", "C")
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"/",".")
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"[.]","-")
view(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", '%d-%m-%Y')
view(df_full2$CREATION_YEAR)
Sys.setlocale("LC_TIME", "en_US.utf8")
lct <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
lct
#clean the dates
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"/",".")
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"[.]","-")
view(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR <- as.Date("df_full2$CREATION_YEAR", '%d-%m-%Y')
view(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR = as.Date("df_full2$CREATION_YEAR", '%d-%m-%Y')
view(df_full2$CREATION_YEAR)
date_format = "%d-%m-%Y"
df_full2$CREATION_YEAR = as.Date(df_full2$CREATION_YEAR, date_format)
view(df_full2$CREATION_YEAR)
str(df_full2$CREATION_YEAR)
view(df_full2$CREATION_YEAR)
df_full2 <- df_full2 %>% mutate_at(vars(CREATION_YEAR), as_datetime)
library(lubridate)
#clean the dates
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"/",".")
df_full2$CREATION_YEAR = str_replace_all(df_full2$CREATION_YEAR,"[.]","-")
view(df_full2$CREATION_YEAR)
df_full2 <- df_full2 %>% mutate_at(vars(CREATION_YEAR), as_datetime)
view(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR
view(df_full2$CREATION_YEAR)
library(tidyverse)
library(readr)
library(dplyr)
library(lubridate)
library(caret)
library(mlr)
set.seed(2022)
#setting working directory and clearing working enviromenent
rm(list=ls())
#getwd()
setwd('C:/Users/zxy/Documents/Analytics_Cup')
#laoding in all the data
test_data <- read_csv("Test_Data_AC2022/pub_f6Xd8II.csv")
customers <- read_csv("Training_Data_AC2022/customers.csv", col_types = cols(CUSTOMER = col_character(),REV_CURRENT_YEAR = col_number()))
geo <- read_csv("Training_Data_AC2022/geo.csv")
sumbission_random <- read_csv("Training_Data_AC2022/submission_random.csv")
transactions <- read_csv("Training_Data_AC2022/transactions.csv",  col_types = cols(CUSTOMER = col_character()))
#merging data
geo[geo == "CH"] <- "Switzerland"
geo[geo == "FR"] <- "France"
transactions$CUSTOMER = str_replace_all(transactions$CUSTOMER,"\"","")
df_full = merge(transactions,geo,by="SALES_LOCATION")
df_full = left_join(df_full, customers, by= c("CUSTOMER", "COUNTRY"))
#view(df_full)
df_full2 = df_full
##OFFER_STATUS setting to all caps
df_full2$OFFER_STATUS <- toupper(df_full2$OFFER_STATUS)
#df_full2$OFFER_STATUS
##OFFER_STATUS "WIN" = "WON", "LOSE" = "LOST"
df_full2$OFFER_STATUS = str_replace(df_full2$OFFER_STATUS,"WON","WIN")
df_full2$OFFER_STATUS = str_replace(df_full2$OFFER_STATUS,"LOSE","LOST")
#df_full2$OFFER_STATUS
#str(df_full2$OFFER_STATUS)
## convert offer status to binary
#as.factor works
df_full2$OFFER_STATUS <- as.factor(df_full2$OFFER_STATUS)
#recoding to binary
df_full2 <- df_full2 %>%
mutate(OFFER_STATUS = recode(OFFER_STATUS,
"LOST" = "0",
"WIN" = "1")) %>%
mutate(OFFER_STATUS = as.factor(OFFER_STATUS))
# set REV_CURRENT_YEAR as double
df_full2$REV_CURRENT_YEAR <- as.double(df_full2$REV_CURRENT_YEAR)
# convert all nomimal values such as OWNERSHIP AND BUSINESS TYPE TO FACTORS
# all nominal values = "COUNTRY.x", "COUNTRY.y", "CURRENCY", "OWNERSHIP", "SALES_BRANCH", "SALES_OFFICE", "BUSINESS_TYPE", "OFFER_TYPE", "TECH", "PRICE_LIST", "SALES_LOCATION"
#nom_val = c("COUNTRY.x", "COUNTRY.y", "CURRENCY", "OWNERSHIP", "SALES_BRANCH", "SALES_OFFICE", "BUSINESS_TYPE", "OFFER_TYPE", "TECH", "PRICE_LIST", "SALES_LOCATION")
#df_full2$SALES_BRANCH
df_full2 <- df_full2 %>%
mutate_at(vars("COUNTRY", "CURRENCY", "OWNERSHIP", "SALES_BRANCH", "SALES_OFFICE", "BUSINESS_TYPE", "OFFER_TYPE", "TECH", "PRICE_LIST", "SALES_LOCATION"), factor)
## doing the currency transformations
levels(df_full2$CURRENCY)
## looking up conversion ratios for Yuan/Pound/Dollar -> Euro
# 7.19 "Chinese Yuan" = 1 Euro => /7.19
# 1 "Pound Sterling" = 1.19 Euro =>/0.8403
# 1.13 "US Dollar" = 1 Euro => /1.13
# 1 "Euro" = 1 "Euro"
#set all 3 collums to euro
df_full2<- df_full2 %>%
mutate(rev_ycur_eu = case_when(CURRENCY == "Chinese Yuan" ~ df_full2$REV_CURRENT_YEAR/7.19,
CURRENCY == "Euro" ~ df_full2$REV_CURRENT_YEAR,
CURRENCY == "US Dollar" ~ df_full2$REV_CURRENT_YEAR/1.13,
CURRENCY == "Pound Sterling" ~ df_full2$REV_CURRENT_YEAR/0.8403))
df_full2<- df_full2 %>%
mutate(rev_y1_eu = case_when(CURRENCY == "Chinese Yuan" ~ df_full2$REV_CURRENT_YEAR.1/7.19,
CURRENCY == "Euro" ~ df_full2$REV_CURRENT_YEAR.1,
CURRENCY == "US Dollar" ~ df_full2$REV_CURRENT_YEAR.1/1.13,
CURRENCY == "Pound Sterling" ~ df_full2$REV_CURRENT_YEAR.1/0.8403))
df_full2<- df_full2 %>%
mutate(rev_y2_eu = case_when(CURRENCY == "Chinese Yuan" ~ df_full2$REV_CURRENT_YEAR.2/7.19,
CURRENCY == "Euro" ~ df_full2$REV_CURRENT_YEAR.2,
CURRENCY == "US Dollar" ~ df_full2$REV_CURRENT_YEAR.2/1.13,
CURRENCY == "Pound Sterling" ~ df_full2$REV_CURRENT_YEAR.2/0.8403))
#view(df_full2)
names(df_full2)
####################### TO DO ##########################
df_full2$avg_rev <- rowMeans(df_full2[33:35], na.rm=TRUE)
df_full2$avg_rev
####################### TO DO ##########################
### reformatting the dates
# to not run all the code again
#df_full2_5 = df_full2
#df_full2 = df_full2_5
#clean the dates
for(i in 1:6){
df_full2$CREATION_YEAR = str_replace(df_full2$CREATION_YEAR,".","")
}
df_full2$CREATION_YEAR <- as.numeric(df_full2$CREATION_YEAR)
df_full2$CREATION_YEAR
# transform the date format(SO_CREATED_DATE) into numerics
df_full2$SO_CREATED_DATE_YEAR = as.numeric(format(as_datetime(df_full2$SO_CREATED_DATE), "%Y"))
## calculate the cooperation time(creation year - SO created)
df_full2$COOP_TIME <- df_full2$SO_CREATED_DATE_YEAR - df_full2$CREATION_YEAR
######################## REPLACE MISSING & WRONG VALUES ##############################
# COOP_TIME
avg_coop_time <- mean(df_full2$COOP_TIME, na.rm = TRUE)
avg_coop_time
df_full2[c("COOP_TIME")][is.na(df_full2[c("COOP_TIME")])] <- avg_coop_time
# avg_rev
avg_all_rev <- mean(df_full2$avg_rev, na.rm = TRUE)
avg_all_rev
df_full2[c("avg_rev")][is.na(df_full2[c("avg_rev")])] <- avg_all_rev
# OWNERSHIP
df_full2 %>% count(OWNERSHIP)
# Replace NA value with "No information"
#df_full2[c("OWNERSHIP")][is.na(df_full2[c("OWNERSHIP")])] <- "No information"
df_full2[c("OWNERSHIP")][is.na(df_full2[c("OWNERSHIP")])] <- "Privately Owned/Publicly Traded"
# SALES LOCATION
df_full2[c("SALES_LOCATION")][is.na(df_full2[c("SALES_LOCATION")])] <- "Zürich EPS"
# BUSINESS_TYPE
df_full2 %>% count(BUSINESS_TYPE)
df_full2$BUSINESS_TYPE[df_full2$BUSINESS_TYPE == "Exp"] <- "E"
df_full2$BUSINESS_TYPE[df_full2$BUSINESS_TYPE == "Mig"] <- "M"
df_full2$BUSINESS_TYPE[df_full2$BUSINESS_TYPE == "New"] <- "N"
# OFFER_TYPE
df_full2 %>% count(OFFER_TYPE)
df_full2 <- df_full2 %>%
mutate_at(vars("COUNTRY", "CURRENCY", "OWNERSHIP", "SALES_BRANCH", "SALES_OFFICE", "BUSINESS_TYPE", "OFFER_TYPE", "TECH", "PRICE_LIST", "SALES_LOCATION"), factor)
# END_CUSTOMER
#filter out the numerical values in END_CUSTOMER column
df_full2$END_CUSTOMER[df_full2$END_CUSTOMER == "Yes"] <- 1
df_full2$END_CUSTOMER[df_full2$END_CUSTOMER == "No"] <- 0
df_full2[c("END_CUSTOMER")][is.na(df_full2[c("END_CUSTOMER")])] <- 0
df_full4 <- df_full2 %>% filter(END_CUSTOMER != 1 & END_CUSTOMER != 0) %>% mutate(END_CUSTOMER = ifelse(END_CUSTOMER == CUSTOMER,'1','0'))
df_full2 <- left_join(df_full2, df_full4, by="MO_ID", all.x=TRUE)
view(df_full2)
